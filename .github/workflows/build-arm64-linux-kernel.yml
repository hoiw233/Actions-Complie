name: Build ARM64 Linux 4.9.113

on:
  workflow_dispatch:
  push:
    tags: v*

jobs:
  build_kernel:
    runs-on: ubuntu-22.04
    env:
      KERNEL_VERSION: 4.9.113
      CONFIG_FILE: config-4.9
      ARCH: arm64
      TOOLCHAIN_URL: https://releases.linaro.org/components/toolchain/binaries/5.5-2019.12/aarch64-linux-gnu/gcc-linaro-5.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz

    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        repository: khadas/linux
        ref: khadas-vim3-p-64bit
        submodules: recursive

    - name: Setup legacy toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses5-dev bison flex \
          libssl1.0-dev bc kmod cpio libelf-dev python2.7 lzop
        
        echo "deb http://security.ubuntu.com/ubuntu bionic-security main" | sudo tee /etc/apt/sources.list.d/bionic-security.list
        sudo apt-get update
        sudo apt-get install -y libssl1.0-dev
        
        wget ${{ env.TOOLCHAIN_URL }}
        sudo tar -xf gcc-linaro-*.tar.xz -C /opt
        echo "/opt/gcc-linaro-5.5.0-2019.12-x86_64_aarch64-linux-gnu/bin" >> $GITHUB_PATH

    - name: Apply kernel config
      run: |
        cp ${{ env.CONFIG_FILE }} .config
        make ARCH=${{ env.ARCH }} CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

    - name: Build kernel artifacts
      run: |
        make -j$(nproc) ARCH=${{ env.ARCH }} CROSS_COMPILE=aarch64-linux-gnu- \
          bindeb-pkg LOCALVERSION=-khadas KDEB_PKGVERSION=$(date +%Y%m%d)
        
        make ARCH=${{ env.ARCH }} CROSS_COMPILE=aarch64-linux-gnu- Image dtbs

    - name: Package artifacts
      run: |
        mkdir artifacts
        cp ../linux-*.deb artifacts/
        cp arch/${{ env.ARCH }}/boot/Image artifacts/
        cp arch/${{ env.ARCH }}/boot/dts/*.dtb artifacts/
        tar czvf kernel-${{ env.KERNEL_VERSION }}.tar.gz artifacts/*

    - name: Upload to Releases
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          kernel-${{ env.KERNEL_VERSION }}.tar.gz
          artifacts/*.deb
          artifacts/Image
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
